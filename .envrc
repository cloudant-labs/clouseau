${DIRENV_DISABLE:+exit}
DIRENV_DBG=${ZIOSE_DIRENV_DEBUG:0}
PATH_add scripts
PATH_add bin
trap on_error ERR

on_error() {
    [ $? -eq 0 ] && return
    failure_message
}

help_message() {
    cat <<EOF
    For more help run: cli help.install
EOF
}

failure_message() {
    cat <<EOF

$(console::red)$(console::bold)direnv wasn't able to complete execution.
You may have been given some recommendations in the error message.
Follow them, and then you'll need to re-run direnv by running "direnv allow".$(console::reset)
EOF
    help_message
}

die() {
    echo -e "$(console::red)$(console::bold)FATAL: ${*}$(console::reset)" >&2
    return 1
}

asdf_has() {
    asdf current $1 >>/dev/null 2>&1
}

requirements=()
. scripts/console.sh
. scripts/tools.sh
requirements=(
    $(console::requires)
    $(tools::requires)
)

(console::debug ${DIRENV_DBG} "requirements: ${requirements[@]}")

hints=()
for tool in ${requirements[@]}; do
    if ! has ${tool} ; then hints+=("please install ${tool}"); fi
done

use asdf

platform="$(uname | tr '[:upper:]' '[:lower:]')"
case "$(uname -m)" in
  x86_64 | amd64) arch="amd64" ;;
  i686 | i386 | 386) arch="386" ;;
  aarch64 | arm64) arch="arm64" ;;
  *)
    fail "Arch '${arch_check}' not supported!"
    ;;
esac

if [ "${arch}" = "amd64" ]; then
    if [ "$(sysctl -in sysctl.proc_translated)" = "1" ]; then
        arch_name=m1.${arch}
    else
        arch_name=${arch}
    fi
    eval "$(/usr/local/bin/brew shellenv)"
    load_prefix /usr/local
else
    fail "M1 is only supported via rosetta 2! Please use `arch -x86_64 <your shell>` to enter emulated environment."
fi

erlang_vsn=$(cat .tool-versions | grep -v '#' | grep erlang | cut -d' ' -f2)
source_env_if_exists ".kerl/${platform}.${arch_name}-${erlang_vsn%.*}"
export ASDF_KERL_VERSION=2.5.1

while read asdf_tool; do
    if ! asdf_has ${asdf_tool}; then asdf direnv local ${asdf_tool}; fi
done < <(cat .tool-versions | grep -v '\#')

watch_file ".asdf"
dotenv_if_exists .envrc.local

export ERL_EPMD_ADDRESS=127.0.0.1

export ERL_PATH=$(asdf where erlang)
export JINTERFACE_VSN=$(semver_search "${ERL_PATH}/lib" "jinterface-" "1")
JINTERFACE_PATH="${ERL_PATH}/lib/jinterface-${JINTERFACE_VSN}"

if [ ! -f "deps/jinterface-${JINTERFACE_VSN}.jar" ]; then
    if [ -f "${JINTERFACE_PATH}/priv/OtpErlang.jar" ]; then
        console::info "    $(console::green) Installing jinterface-${JINTERFACE_VSN}.jar"
        cp "${JINTERFACE_PATH}/priv/OtpErlang.jar" "deps/jinterface-${JINTERFACE_VSN}.jar"
    else
        console::warn "    $(console::red) jinterface not found in ${JINTERFACE_PATH}/"
        hints+=(
            "Please, install erlang version with jinterface support.
            If you use recomended asdf+direnv setup
            and didn't modify '.tool-versions>' yourself you can use
                asdf uninstall erlang ${erlang_vsn}
            Then use 'direnv allow' to reload configuration.
            If you did modify '.tool-versions' please create either
                - '.kerl/${platform}.${arch_name}-${erlang_vsn%.*}'
                - '.kerl/${platform}.${arch_name}-${erlang_vsn}'
            file."
        )
    fi
fi

if [ ${#hints[@]} -ne 0 ]; then
    (
        echo -e "\n$(console::red)Run the following commands to bring your environment up-to-date:"
        for cmd in "${hints[@]}"; do
            console::warn "    $(console::red)$cmd"
        done
        echo ""
    )
    die
fi

export JAVA_HOME="$(dirname "$(dirname "$(expand_path "$(asdf which java)" "/")")")"

tools::activate_tools

GIT_HOOKS_DIR=`expand_path .git/hooks .`
[ -L ${GIT_HOOKS_DIR}/pre-commit ] || ln -s ${SELF_DIR}/pre-commit-hook ${GIT_HOOKS_DIR}/pre-commit
