#!/bin/bash
## -*- mode: shell -*-
## vim: set filetype=shell
## sublimeconf: filetype=shell

# https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

SELF_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
GHE=github.ibm.com
ISSUES_REPO=https://${GHE}/cloudant/dbcore
PROJECT_LABEL=type:technical-foundation

os="$(uname -s | tr '[:upper:]' '[:lower:]')"

requirements=()
. "${SELF_DIR}"/console.sh
. "${SELF_DIR}"/tools.sh
. "${SELF_DIR}"/run.sh
requirements=(
  "$(console::requires)"
  "$(tools::requires ${os})"
  "awk"
)

if [ "$#" -eq 0 ]; then
  command='help'
else
  command=$1
  shift
fi

die() {
  echo -e "\n$(console::red)$(console::bold)FATAL: ${*}$(console::reset)" >&2
  return 1
}

function help_message() {
  cat "${SELF_DIR}"/cli.md
}

function short_help() {
  help_message | awk "/# CLI/,/---/ {print}" -
}

function help_topic() {
  help_message | awk "/###.*\`${1}\`:.*/,/---/ {print}" -
}

function list() {
  help_message | sed -n 's/###/*/p' | sort
}

ensure_args() {
  local expected=${1}
  local help=${2}
  shift
  shift
  if [ "$#" -lt "${expected}" ]; then
    echo -e "\n$(console::red)ERROR: Missing mandatory arguments$(console::reset)\n"
    console::markdown "${help}"
    exit 1
  fi
}

function help_cmd() {
  if [ "$#" -eq 0 ]; then
    console::markdown short_help
  else
    console::markdown "help_topic $1"
  fi
}

function deps_cmd() {
  ensure_args 1 "help_topic deps" $@
  local command=${1}
  case "${command}" in
  tree)
    echo "not yet implemented"
    ;;
  esac
}

is_ghe_authenticated() {
  gh auth status --hostname ${GHE} >>/dev/null 2>&1
  return
}

function gh_cmd() {
  ensure_args 1 "help_topic gh" $@
  local command=${1}
  case "${command}" in
  login)
    gh auth login --hostname ${GHE} -w --git-protocol https
    return
    ;;
  *)
    console::errorLn "Unknown command '${command}'"
    console::markdown "help_topic gh"
    exit 1
    ;;
  esac
}

function issue_cmd() {
  ensure_args 1 "help_topic issue" $@
  if ! is_ghe_authenticated; then
    echo -e "\n$(console::red)ERROR: Not authenticated with ${GHE}$(console::reset)\n"
    echo -e "  Please run $(console::bold)cli gh login$(console::reset)\n"
    exit 1
  fi
  local command=${1}
  shift
  case "${command}" in
  create)
    ensure_args 1 "echo <title>" $@
    local title="${1}"
    shift
    local candidate_parent="${title%:*}"
    local parent=""
    if [[ "${candidate_parent}" =~ ^[0-9]+$ ]]; then
      #if title starts with number use it as parent
      local parent="Parent: ${ISSUES_REPO}/issues/${candidate_parent}"
      local title="${title#*:}"
      gh issue create --repo ${ISSUES_REPO} --title "${title}" --body "${parent}" --label "${PROJECT_LABEL}" $@
    else
      gh issue create --repo ${ISSUES_REPO} --title "${title}" --label "${PROJECT_LABEL}" $@
    fi
    ;;
  list)
    gh issue list --repo ${ISSUES_REPO} --label="${PROJECT_LABEL}"
    ;;
  view)
    ensure_args 1 "echo <issue_id>" $@
    local issue_id=${1}
    shift
    gh issue view --repo ${ISSUES_REPO} ${issue_id} $@
    ;;
  comment)
    ensure_args 1 "echo <issue_id>" $@
    local issue_id=${1}
    shift
    gh issue comment --repo ${ISSUES_REPO} ${issue_id} $@
    ;;
  esac
}

case "${command}" in
verify)
  tools::verify "${requirements[@]}"
  exit $?
  ;;
activate)
  tools::activate_tools
  exit $?
  ;;
commands)
  console::markdown list
  exit $?
  ;;
help)
  help_cmd "$@"
  exit $?
  ;;
deps)
  deps_cmd "$@"
  exit $?
  ;;
bootstrap)
  tools::bootstrap "$(basename "${SHELL}")"
  exit $?
  ;;
issue)
  issue_cmd "$@"
  exit $?
  ;;
gh)
  gh_cmd "$@"
  exit $?
  ;;
fmt)
  console::infoLn "Reformat scala code"
  scalafmt
  exit $?
  ;;
start)
  ensure_args 2 "help_topic start" "$@"
  if ! run::start "$@"; then
    console::errorLn "\n\tYou can use 'cli stop $1' to stop the service"
    exit 1
  fi
  exit 0
  ;;
stop)
  ensure_args 1 "help_topic stop" "$@"
  run::stop "$1"
  exit $?
  ;;
zeunit)
  ensure_args 1 "help_topic zeunit" "$@"
  name=$1
  cookie=$(echo "$2" | sed 's/.*=//g')
  run::health-check "$name" "$cookie" || exit 1
  shift
  [ -z "$cookie" ] && shift
  run::eunit "$@"
  exit $?
  ;;
tdump)
  ensure_args 1 "help_topic tdump" "$@"
  name=$1
  run::java_thread_dump "$name"
  ;;
*)
  console::errorLn "Unknown command '${command}'"
  console::infoLn "List of supported commands"
  console::markdown list
  exit $?
  ;;
esac
